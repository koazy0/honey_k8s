syntax = "proto3"; // 指定proto版本
package node_rpc;     // 指定默认包名

// 指定golang包名
option go_package = "/node_rpc";

//定义rpc服务
service NodeService {
  // 节点注册
  rpc Register (RegisterRequest) returns (BaseResponse) {}
  // 节点资源检测
  rpc NodeResource (NodeResourceRequest) returns (BaseResponse) {}
  // 管理下发命令到节点运行
  rpc Command (stream CmdResponse) returns (stream CmdRequest) {}
  // 节点上报创建IP的回调
  rpc StatusCreateIP(StatusCreateIPRequest)returns (BaseResponse) {}
  // 节点上报删除IP的回调
  rpc StatusDeleteIP(StatusDeleteIPRequest)returns (BaseResponse) {}
  // 端口转发通道
  rpc Tunnel(stream TunnelData) returns (stream TunnelData) {};
}
message BaseResponse{
  int32 code = 1;
  string msg = 2;
}
message RegisterRequest {
  string ip = 1;
  string mac = 2;
  string node_uid = 3;
  string version = 4;
  string Commit = 5;
  systemInfoMessage systemInfo = 6;
  resourceMessage resourceInfo = 7;
  repeated networkInfoMessage networkList = 8;
}

message NodeResourceRequest {
  string node_uid = 1;
  resourceMessage resourceInfo = 2;
}


message systemInfoMessage {
  string  hostName = 1;
  string distributionVersion = 2;
  string coreVersion = 3;
  string systemType = 4;
  string startTime = 5;
}
message resourceMessage {
  int64 cpuCount = 1;
  float cpuUseRate = 2;
  int64 memTotal = 3;
  float  memUseRate = 4;
  int64 diskTotal = 5;
  float  diskUseRate = 6;
  string nodePath = 7;
  int64  nodeResourceOccupancy = 8;
}

message networkInfoMessage {
  string network = 1;
  string ip = 2;
  string net = 3;
  int32 mask = 4;
}

enum CmdType {
  cmdNetworkFlushType = 0;
  cmdNetScanType = 1;
  cmdNodeRemoveType = 2;
}

message CmdRequest {
  CmdType cmdType = 1;
  string taskID = 2;
  NetworkFlushInMessage NetworkFlushInMessage = 3;
  NetScanInMessage NetScanInMessage = 4;
  NodeRemoveInMessage NodeRemoveInMessage = 5;
}



message NetworkFlushInMessage {
  repeated string filterNetworkName = 1;
}
message NetScanInMessage {
  string network = 1; //使用哪一个网卡进行arp探测
  string ipRange = 2; // 需要扫描的ip列表
  repeated string filterIPList = 3; // 不需要扫描的ip列表
  uint32 netID = 4; // 网络id
}
message NodeRemoveInMessage {

}
message NetworkFlushOutMessage {
  repeated networkInfoMessage networkList = 1;
}
message NetScanOutMessage {
  bool end = 1; // 是否结束
  float progress = 2; // 扫描进度
  string ip = 3; // ip
  string mac = 4; // mac地址
  string manuf = 5;// mac对应的厂商
  uint32 netID = 6; // 网络id
  string errMsg = 7; // 错误
}
message NodeRemoveOutMessage {

}
message CmdResponse {
  CmdType cmdType = 1;
  string taskID = 2;
  string nodeID = 3;
  int32 code = 4;
  string errorMsg = 5;

  NetworkFlushOutMessage NetworkFlushOutMessage = 6;
  NetScanOutMessage NetScanOutMessage = 7;
  NodeRemoveOutMessage NodeRemoveOutMessage = 8;
}

message StatusCreateIPRequest {
  uint32 honeyIPID = 1;
  string errMsg = 2;
  string network = 3;
  string mac = 4;
}

message StatusDeleteIPRequest {
  repeated uint32 honeyIPIDList = 1;
}

// 传输的数据块
message TunnelData {
  bytes chunk = 1;  // 数据块
  string address = 2; // 目标地址
}

// protoc --go_out=. --go-grpc_out=. *.proto
// 在rpc目录下执行